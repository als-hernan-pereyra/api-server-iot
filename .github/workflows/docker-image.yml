name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Set up Node.js (adjust version as needed)
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    # Install dependencies
    - name: Install dependencies
      run: npm install

    # Run ESLint to check code integrity (code quality checks)
    - name: Run ESLint
      run: npm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint

    steps:
    # Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Set up Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    # Install dependencies
    - name: Install dependencies
      run: npm install

    # Run unit tests (using Jest or Mocha)
    - name: Run tests
      run: npm test

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    # Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Build Docker image for backend
    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/api-server-iot:${{ github.sha }} .

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Push Docker image to Docker Hub
    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/api-server-iot:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # SSH into the EC2 server to deploy the backend
    - name: Deploy to EC2 server
      run: |
        ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          # Pull the latest Docker image and restart the backend
          docker pull ${{ secrets.DOCKER_USERNAME }}/api-server-iot:${{ github.sha }}
          cd /path/to/your/project
          docker-compose down
          docker-compose up -d
        EOF

    # Optional: Notify deployment success
    - name: Notify deployment success
      run: echo "Backend deployed successfully to EC2!"